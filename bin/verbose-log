#!/bin/bash
#
# Usage: verbose-log [-c prefix_char] [-p prefix] [level]
#

if [ -z "$EZVM_BASE_DIR" ]; then
    # EZVM_BASE_DIR is ..
    bindir="$(dirname "$(readlink -f "$0")")"
    export EZVM_BASE_DIR="$(dirname $(dirname "$bindir"))"
fi

# Slurp up some useful libs
. $EZVM_BASE_DIR/libs/settings.sh
. $EZVM_BASE_DIR/libs/common.sh
. $EZVM_BASE_DIR/libs/usage.sh

PREFIX_STR="#"
PREFIX=" "

while getopts ":c:p:" flag; do
    case "$flag" in
        c)
            PREFIX_STR=$OPTARG
            ;;
        p)
            PREFIX=$OPTARG
            ;;
        *)
            printUsageAndExit ;;
    esac
done
shift $((OPTIND-1))

# Set level to first argument, or "1" if no argument
level=${1:-1}

# Inherit EZVM_VERBOSITY from environment, if any; use "1" as default
EZVM_VERBOSITY=${EZVM_VERBOSITY:-1}

PL=$((${SHLVL:-1}-1))

for (( i=0; i<$PL; i++ )); do
    PREFIX="$PREFIX_STR$PREFIX"
done

# If the current log level is higher than the EZVM_VERBOSITY level,
# then we're not interested in seeing this log message
if [ "$level" -gt "$EZVM_VERBOSITY" ]; then
#    echo "log level higher than verbosity level, ignoring"
    exit 0
fi

# Write out the contents of STDIN
# If there is an OS environment variable (it gets set by Windows, maybe others)
if [ "$EZVM_IS_WINDOWS" = "YES" ]; then
    cat | sed -e 's,\n,\n\r,g' -e "s,^,$PREFIX,g"
    exit 0
fi

# If there is NO input waiting in STDIN then we don't want to wait for it
# as if we're an interactive program.  We are not.
#
# NOTE: we SKIP this test for Windows platforms, since for some reason
# (at least in MinGW) `read -t 0` returns FALSE even when there is input
# waiting on STDIN, so this effectively breaks windows.
#
# Skipping on windows means the program may hang if you use verbose-log
# inappropriately, so please don't.  :)
#
#=== Commenting out entirely because it's broken on GCE as well ===
#
#if ! read -t 0; then
#    echo "Warning: No input was given to STDIN for $0" 1>&2
#    exit 1
#fi

cat | sed -e "s,^,$PREFIX,g"
exit 0
